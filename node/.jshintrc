{

  // Settings
  "passfail"    : false,  // Stop on first error.
  "maxerr"      : 50,    // Maximum errors before stopping.
  "multistr"    : true,

  // Predefined globals whom JSHint will ignore.
  "node"        : true,

  // Extra globals.
  "predef"      : [
    "__dirname",
    "Buffer",
    "event",
    "exports",
    "global",
    "main",
    "module",
    "process",
    "require",
    "setTimeout",
    "after",
    "afterEach",
    "afterAll",
    "before",
    "beforeEach",
    "beforeAll",
    "context",
    "describe",
    "it",
    "suite",
    "setup",
    "test",
    "teardown",
    "describe",
    "it"
  ],

  // Development.
  "debug"       : false,  // Allow debugger statements e.g. browser breakpoints.
  "devel"       : true,   // Allow development statements e.g. `console.log();`.

  // EcmaScript 5.
  // "es5"         : true,   // Allow EcmaScript 5 syntax.
  "esnext"      : true,   // Allow ES.next specific features such as const
  "strict"      : true,   // Require `use strict` pragma in every file.
  "globalstrict": true,   // Allow global "use strict" (also enables 'strict').

  "asi"          : false, // Tolerate Automatic Semicolon Insertion (no semicolons).
  "laxbreak"     : false, // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
  "bitwise"      : true,  // Prohibit bitwise operators (&, |, ^, etc.).
  "camelcase"    : false, // Force all variable names to use either camelCase of UPPER_CASE
  "boss"         : false, // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
  "curly"        : true,  // Require {} for every new block or scope.
  "eqeqeq"       : true,  // Require triple equals i.e. `===`.
  "eqnull"       : false, // Tolerate use of `== null`.
  "evil"         : false, // Tolerate use of `eval`.
  "expr"         : false, // Tolerate `ExpressionStatement` as Programs.
  "forin"        : true,  // Tolerate `for in` loops without `hasOwnProperty`.
  "immed"        : true,  // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
  "latedef"      : false, // Prohibit variable use before definition.
  "loopfunc"     : true,  // Allow functions to be defined within loops.
  "maxparams"    : 4,     // This option lets you set the max number of formal parameters allowed per function.
  "maxdepth"     : 5,     // This option lets you control how nested do you want your blocks to be.
  "maxcomplexity": 10,    // This option lets you control cyclomatic complexity throughout your code. Cyclomatic complexity measures the number of linearly independent paths through a program's source code.
  "noarg"        : true,  // Prohibit use of `arguments.caller` and `arguments.callee`.
  "regexp"       : false, // Prohibit `.` and `[^...]` in regular expressions.
  "regexdash"    : false, // Tolerate unescaped last dash i.e. `[-...]`.
  "scripturl"    : true,  // Tolerate script-targeted URLs.
  "shadow"       : false, // Allows re-define variables later in code e.g. `var x=1; x=2;`.
  "supernew"     : false, // Tolerate `new function () { ... };` and `new Object;`.
  "undef"        : true,  // Require all non-global variables be declared before they are used.

  "newcap"  : true,   // Require capitalization of all constructor functions e.g. `new F()`.
  "noempty" : true,   // Prohibit use of empty blocks.
  "nonew"   : true,   // Prohibit use of constructors for side-effects.
  "nomen"   : false,  // Prohibit use of initial or trailing underbars in names.
  "onevar"  : false,  // Allow only one `var` statement per function.
  "plusplus": false,  // Prohibit use of `++` & `--`.
  "sub"     : true,   // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
  "trailing": false,  // Prohibit trailing whitespaces. (only works if white is 'true')
  "white"   : false,  // Check against strict whitespace and indentation rules.
  // "indent"  : 2,      // Enforce consistent indenting.
  "unused"  : false    // This option warns when you define and never use your variables.
}
